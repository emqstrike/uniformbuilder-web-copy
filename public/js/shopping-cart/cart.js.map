{"version":3,"sources":["Cart.js"],"names":[],"mappingsfile":"cart.js","sourcesContent":["/**\n * Required global object\n * - cart\n *     - api_host\n *     - current_rate\n *     - current_currency\n *         - rate\n *         - symbol\n *\n * File dependencies\n * - public/js/shopping-cart/shopping-cart.js\n */\nvar Cart = {\n    cart_items: [],\n    ma: null,\n\n    addPlayerValidationObj: null,\n    editPlayerValidationObj: null,\n\n    init: function() {\n        Cart.ma = new MaterialApi(cart.api_host);\n\n        Cart.initCartItems(function() {\n            var duplicate_material = Cart.getDuplicateMaterial(Cart.cart_items);\n\n            if (duplicate_material.length > 0) {\n                var duplicate_items_tmpl = _.template($('#duplicate-items-tmpl').html());\n                bootbox.dialog({\n                    title: \"You have duplicate items. Please choose do you want to retain.\",\n                    message: duplicate_items_tmpl({duplicate_cart_items: duplicate_material}),\n                    closeButton: false\n                });\n\n                $('body').on('click', '#duplicate-items-container .cart-item-btn', Cart.onSelectItemToBeRetain);\n            } else {\n                var el = $('#cart-items-el');\n                var cart_items_tmpl = _.template($('#cart-items-tmpl').html());\n\n                el.append(cart_items_tmpl({\n                    cart_items: Cart.cart_items\n                }));\n\n                el.on('change', ':input[name=\"size\"]', Cart.onSizeChange);\n                $('.player-list .add-player', el).click(Cart.onAddPlayer);\n                $('.view-all-players', el).click(Cart.onViewAllPlayers);\n\n                $('.player-list tbody', el).on('click', 'tr td .edit-player', Cart.onEditPlayer);\n                $('.player-list tbody', el).on('click', 'tr td .delete-player', Cart.onDeletePlayer);\n\n                $('.cart-item', el).on('click', '.delete-cart-item', Cart.onDeleteItemToCart);\n\n                Cart.setDynamicMaterialSize(Cart.cart_items);\n            }\n        });\n    },\n\n    /**\n     * Initialize the cart items first before the application start\n     *\n     * @param  function callback\n     * @return void\n     */\n    initCartItems: function(callback) {\n        $('#cart-items-el').html('<div class=\"col-md-12\">Loading cart items ...</div>');\n\n        ShoppingCart.cipa.getPlayersPerCartItem(function(response, textStatus, xhr) {\n            if (response.success) {\n                if (response.data.length > 0) {\n                    Cart.cart_items = response.data;\n\n                    $('#cart-items-el').html(\"\");\n\n                    callback();\n                } else {\n                    $('#cart-items-el').html('<div class=\"col-md-12\">Cart is empty</div>');\n                }\n            } else {\n                $('#cart-items-el').html('<div class=\"col-md-12\">Failed to fetch cart items.</div>');\n            }\n        });\n    },\n\n    initAddPlayerValidation: function(form_selector, options) {\n        var jvBs3 = new JvBs3(form_selector, options);\n        Cart.addPlayerValidationObj = jvBs3.validate(\n            // rules\n            {\n                last_name: {\n                    required: true,\n                    minlength: 2,\n                    maxlength: 50,\n                    regex: /^[a-zA-Z\\s]+$/i\n                },\n                number: {\n                    required: true,\n                    number: true,\n                    min: 0,\n                    max: 99,\n                    rangelength: [1, 2]\n                },\n                quantity: {\n                    required: true,\n                    number: true,\n                    min: 1,\n                    max: 100\n                }\n            },\n\n            // messages\n            {\n                last_name: {\n                    regex: \"Please input only letters.\"\n                }\n            }\n        );\n    },\n\n    initEditPlayerValidation: function(form_selector, options) {\n        var jvBs3 = new JvBs3(form_selector, options);\n        Cart.editPlayerValidationObj = jvBs3.validate(\n            // rules\n            {\n                last_name: {\n                    required: true,\n                    minlength: 2,\n                    maxlength: 50,\n                    regex: /^[a-zA-Z\\s]+$/i\n                },\n                number: {\n                    required: true,\n                    number: true,\n                    min: 0,\n                    max: 99,\n                    rangelength: [1, 2]\n                },\n                quantity: {\n                    required: true,\n                    number: true,\n                    min: 1,\n                    max: 100\n                }\n            },\n\n            // messages\n            {\n                last_name: {\n                    regex: \"Please input only letters.\"\n                }\n            }\n        );\n    },\n\n    loadPlayers: function(cart_item_id, size) {\n        var cart_item_el = $('#cart-items-el .cart-item[data-cart-item-id=\"'+cart_item_id+'\"]');\n\n        var player_rows_tmpl = _.template($('#player-rows-tmpl').html());\n\n        var cart_item = _.find(Cart.cart_items, {cart_item_id: cart_item_id});\n        var players = _.filter(cart_item.players, {size: size});\n\n        $('.player-list tbody', cart_item_el).html(player_rows_tmpl({\n            players: players\n        }));\n    },\n\n    getDuplicateMaterial: function (cart_items) {\n        var duplicate_material = [];\n        var material_ids = _.uniq(_.pluck(cart_items, \"material_id\"));\n\n        for (var i in material_ids) {\n            var material_id = material_ids[i];\n            var result = _.where(cart_items, {material_id: material_id});\n\n            if (result.length > 1) {\n                duplicate_material.push(result);\n            }\n        }\n\n        return duplicate_material;\n    },\n\n    setDynamicMaterialSize: function(cart_items) {\n        Cart.getAllMaterials(cart_items, function(response) {\n            if (response.success) {\n                var material = response.material;\n\n                var pricing = JSON.parse(material.pricing);\n\n                var cart_item_el = $('#cart-items-el .cart-item[data-material-id=\"'+material.id+'\"]');\n                var cart_item_id = cart_item_el.data('cart-item-id');\n\n                var input_parent = $(':input[name=\"size\"]', cart_item_el).parent();\n                $(':input[name=\"size\"]', cart_item_el).remove();\n\n                var tmpl = _.template($('#sizes-tmpl').html());\n                input_parent.append(tmpl({\n                    sizes: pricing.properties,\n                    currency: {\n                        symbol: cart.current_currency.symbol,\n                        rate: cart.current_currency.rate\n                    }\n                }));\n\n                var size_price = JSON.parse($(':input[name=\"size\"]', cart_item_el).val());\n                return Cart.loadPlayers(cart_item_id, size_price.size);\n            } else {\n                console.log(response.message);\n            }\n        });\n    },\n\n    getAllMaterials: function(cart_items, callback) {\n        var cart_item;\n\n        for (var i in cart_items) {\n            cart_item = cart_items[i];\n            Cart.ma.getMaterial(cart_item.material_id, callback);\n        }\n    },\n\n    onSelectItemToBeRetain: function() {\n        var _this = this;\n\n        $(this).parent().find('button').removeClass(\"active\");\n        $(this).addClass(\"active\");\n\n        bootbox.confirm(\"Are you sure do you want to retain the selected item?\", function(yes) {\n            if (yes) {\n                var cart_item_id = $(_this).data('cart-item-id');\n\n                ShoppingCart.cia.retainItem(cart_item_id, function(response) {\n                    if (response.success) {\n                        $(_this).removeClass(\"btn-default\").addClass(\"btn-success\").prop('disabled', true);\n                        $(_this).parent().find(\"button:not('.active')\").fadeOut(function() {\n                            $(this).remove();\n\n                            var done = true;\n                            $.each($('#duplicate-items-container .panel'), function(index, el) {\n                                if ($('.cart-item-btn', el).length > 1) {\n                                    done = false;\n                                    return;\n                                }\n                            });\n\n                            if (done) {\n                                location.reload();\n                            }\n                        });\n                    } else {\n                        bootbox.alert(response.message);\n                    }\n                });\n            } else {\n                $(_this).removeClass('active');\n            }\n        });\n    },\n\n    onSizeChange: function() {\n        var cart_item_id = $(this).closest('.cart-item').data('cart-item-id');\n        var size = $(this).val();\n\n        Cart.loadPlayers(cart_item_id, size);\n    },\n\n    onViewAllPlayers: function() {\n        var cart_item_id = $(this).closest('.cart-item').data('cart-item-id');\n        var tmpl = _.template($('#all-players-tmpl').html());\n\n        var cart_item = _.find(Cart.cart_items, {cart_item_id: cart_item_id});\n        var all_player_sizes = _.sortBy(_.uniq(_.pluck(cart_item.players, 'size')));\n\n        bootbox.dialog({\n            title: \"All Players\",\n            className: \"all-players-modal\",\n            message: tmpl({\n                players: cart_item.players,\n                all_player_sizes: all_player_sizes,\n                currency_symbol: cart.current_currency.symbol\n            }),\n            size: \"large\"\n        });\n    },\n\n    onAddPlayer: function() {\n        var cart_item_el = $(this).closest('.cart-item');\n        var cart_item_id = cart_item_el.data('cart-item-id');\n\n        var material_id = cart_item_el.data('material-id');\n\n        var form_tmpl = _.template($('#form-tmpl').html());\n        var player_row_tmpl = _.template($('#player-row-tmpl').html());\n\n        var size_el = $(':input[name=\"size\"]', cart_item_el);\n        var size_price = JSON.parse(size_el.val());\n        var pricing_age = $(\":selected\", size_el).parent().attr('label').toLowerCase();\n\n        var player_list_el = $('.player-list tbody', cart_item_el);\n\n        var cart_item = _.find(Cart.cart_items, {cart_item_id: cart_item_id});\n\n        var addPlayerForm;\n\n        var addPlayerBootbox = bootbox.dialog({\n            title: \"Add Player\",\n            message: form_tmpl(),\n            closeButton: false,\n            className: \"add-player-modal\",\n\n            buttons: {\n                cancel: {\n                    label: \"Cancel\",\n                    className: \"btn-default\"\n                },\n\n                ok: {\n                    label: '<span class=\"glyphicon glyphicon-saved\"></span> Add Player',\n                    className: \"btn-primary\",\n                    callback: function() {\n                        addPlayerForm.submit();\n                        return false;\n                    }\n                }\n            }\n        });\n\n        addPlayerBootbox.on(\"shown.bs.modal\", function() {\n            addPlayerForm = $('.add-player-modal form');\n            $(':input[name=\"last_name\"]', addPlayerForm).focus();\n\n            $('.form-group > label').addClass(\"control-label\");\n            Cart.initAddPlayerValidation(addPlayerForm, {\n                submitHandler: function(form) {\n                    var last_name = $(':input[name=\"last_name\"]', form).val(),\n                        number = $(':input[name=\"number\"]', form).val(),\n                        quantity = $(':input[name=\"quantity\"]', form).val();\n\n                    ShoppingCart.cipa.addPlayer(cart_item_id, {\n                        size: size_price.size,\n                        last_name: last_name,\n                        number: number,\n                        price: parseFloat(size_price.price),\n                        quantity: quantity,\n\n                        material_id: material_id,\n                        pricing_age: pricing_age\n                    }, null, {\n                        beforeSend: function() {\n                            $(':input', form.closest('.modal-content')).prop('disabled', true);\n                        },\n\n                        success: function(response) {\n                            if (response.success) {\n\n                                if (_.filter(cart_item.players, {size: size_price.size}).length == 0) {\n                                    player_list_el.html(\"\");\n                                }\n\n                                cart_item.players.push(response.data);\n                                var tr_num = $('tr', player_list_el).length;\n                                player_list_el.append(player_row_tmpl(_.extend({index: tr_num + 1}, response.data)));\n\n                                $(form).before('<div class=\"alert alert-success\"><p>'+response.message+'</p></div>');\n\n                                _.delay(function() {\n                                    addPlayerBootbox.modal('hide');\n                                    $(':input', form.closest('.modal-content')).prop('disabled', false);\n                                }, 1000);\n                            } else {\n                                alert(response.message);\n                                location.reload();\n                            }\n                        }\n                    });\n\n                    return false;\n                }\n            });\n        });\n\n        addPlayerBootbox.on(\"shown.bs.modal\", function() {\n            $('.add-player-modal form :input[name=\"last_name\"]').focus();\n        });\n\n        addPlayerBootbox.on(\"hide.bs.modal\", function() {\n            Cart.addPlayerValidationObj.destroy();\n        });\n    },\n\n    onEditPlayer: function() {\n        var cart_item_el = $(this).closest('.cart-item');\n        var cart_item_id = cart_item_el.data('cart-item-id');\n\n        var material_id = cart_item_el.data('material-id');\n\n        var _this = $(this);\n        var player_id = $(this).data('id');\n        var form_tmpl = _.template($('#form-tmpl').html());\n\n        var size_el = $(':input[name=\"size\"]', cart_item_el);\n        var size_price = JSON.parse(size_el.val());\n        var pricing_age = $(\":selected\", size_el).parent().attr('label').toLowerCase();\n\n        var cart_item = _.find(Cart.cart_items, {cart_item_id: cart_item_id});\n\n        var player = _.find(cart_item.players, {id: parseInt(player_id)});\n\n        var editPlayerForm;\n\n        var editPlayerBootbox = bootbox.dialog({\n            title: \"Edit Player\",\n            message: form_tmpl({\n                last_name: player.last_name,\n                number: player.number,\n                quantity: player.quantity\n            }),\n            closeButton: false,\n            className: \"edit-player-modal\",\n\n            buttons: {\n                cancel: {\n                    label: \"Cancel\",\n                    className: \"btn-default\"\n                },\n\n                ok: {\n                    label: '<span class=\"glyphicon glyphicon-saved\"></span> Update Player',\n                    className: \"btn-success\",\n                    callback: function() {\n                        editPlayerForm.submit();\n                        return false;\n                    }\n                }\n            }\n        });\n\n        editPlayerBootbox.on(\"shown.bs.modal\", function() {\n            editPlayerForm = $('.edit-player-modal form');\n            $(':input[name=\"last_name\"]', editPlayerForm).focus();\n\n            $('.form-group > label').addClass(\"control-label\");\n            Cart.initEditPlayerValidation(editPlayerForm, {\n                submitHandler: function(form) {\n                    var last_name = $(':input[name=\"last_name\"]', form).val(),\n                        number = $(':input[name=\"number\"]', form).val(),\n                        quantity = $(':input[name=\"quantity\"]', form).val();\n\n                    if (!_.isEmpty(last_name) && !_.isEmpty(number) && !_.isEmpty(quantity)) {\n                        editPlayerBootbox.modal('hide');\n\n                        bootbox.dialog({ message: '<div class=\"text-center\"><i class=\"fa fa-spin fa-spinner\"></i> Loading...</div>' });\n\n                        ShoppingCart.cipa.updatePlayer(cart_item_id, player_id, {\n                            size: size_price.size,\n                            last_name: last_name,\n                            number: number,\n                            price: parseFloat(size_price.price),\n                            quantity: quantity,\n\n                            material_id: material_id,\n                            pricing_age: pricing_age\n                        }, null, {\n                            beforeSend: function() {\n                                $(':input', form.closest('.modal-content')).prop('disabled', true);\n                            },\n\n                            success: function(response) {\n                                if (response.success) {\n                                    player.last_name = last_name;\n                                    player.number = number;\n                                    player.quantity = parseInt(quantity);\n\n                                    player_data = _.find(cart_item.players, {id: parseInt(player_id)});\n\n                                    if (player === player_data) {\n                                        console.log(\"saved!\");\n\n                                        var tr = _this.closest('tr');\n                                        $('.last_name', tr).text(last_name);\n                                        $('.number', tr).text(number);\n                                        $('.quantity', tr).text(quantity);\n                                    } else {\n                                        console.log(\"not save!\");\n                                    }\n                                }\n\n                                bootbox.hideAll();\n                            },\n\n                            error: function(xhr) {\n                                if (xhr.status === 422) {\n                                    var errors = xhr.responseJSON;\n\n                                    // if user try to change/hack the default product price\n                                    if (typeof errors.price !== \"undefined\") {\n                                        alert(\"Looks like you modify the default price of items. The system will force to load automatically.\");\n                                        location.reload();\n                                    }\n                                }\n                            }\n                        });\n                    } else {\n                        console.log(\"invalid input\");\n                    }\n\n                    return false;\n                }\n            });\n        });\n\n        editPlayerBootbox.on(\"shown.bs.modal\", function() {\n            $('.add-player-modal form :input[name=\"last_name\"]').focus();\n        });\n\n        editPlayerBootbox.on(\"hide.bs.modal\", function() {\n            Cart.editPlayerValidationObj.destroy();\n        });\n    },\n\n    onDeletePlayer: function() {\n        var _this = $(this);\n\n        var deletePlayerBootbox = bootbox.confirm(\"Delete the player?\", function(yes) {\n            if (yes) {\n                _this.button('loading');\n\n                var cart_item_el = _this.closest('.cart-item');\n                var cart_item_id = cart_item_el.data('cart-item-id');\n\n                var player_id = _this.data('id');\n                var size_price = JSON.parse($(':input[name=\"size\"]', cart_item_el).val());\n\n                var cart_item = _.find(Cart.cart_items, {cart_item_id: cart_item_id});\n                var players = cart_item.players;\n\n                ShoppingCart.cipa.deletePlayer(cart_item_id, player_id, function(response, textStatus, xhr) {\n                    if (response.success) {\n                        cart_item.players = _.reject(players, {id: parseInt(player_id)});\n\n                        if (cart_item.players.length < players.length) {\n                            console.log(\"removed!\");\n\n                            _this.closest('tr').fadeOut();\n\n                            if (_.filter(cart_item.players, {size: size_price.size}).length == 0) {\n                                $('.player-list tbody', cart_item_el).html('<tr><td colspan=\"5\">No players added</td></tr>');\n                            }\n                        } else {\n                            console.log(\"not remove!\");\n                        }\n                    } else {\n                        alert(response.message);\n                        location.reload();\n                    }\n                });\n            }\n        });\n\n        deletePlayerBootbox.on(\"show.bs.modal\", function() {\n            _this.blur();\n        });\n        deletePlayerBootbox.modal(\"show\");\n    },\n\n    onDeleteItemToCart: function(e) {\n        var _this = $(this);\n        var cart_item_id = parseInt($(this).data('cart-item-id'));\n\n        bootbox.confirm(\"Remove Item to Cart?\", function(yes) {\n            if (yes) {\n                _this.button('loading');\n\n                ShoppingCart.cia.deleteToCart(cart_item_id, function(response) {\n                    if (response.success) {\n                        _this.closest('.cart-item').fadeOut();\n                        bootbox.alert(\"Successfully deleted\");\n\n                        ShoppingCart.loadCartNumber();\n                    } else {\n                        bootbox.alert(response.message);\n                        _this.button('reset');\n                    }\n                });\n            }\n        });\n    }\n};\n\n$(document).ready(Cart.init);"]}