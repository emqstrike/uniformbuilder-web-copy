{"version":3,"sources":["CartItemApi.js"],"names":[],"mappingsfile":"cart-item-api.js","sourcesContent":["/**\n * Dependency\n * - jquery\n * - X-CSRF-TOKEN - to avoid token mismatch\n */\n\nfunction CartItemApi(logged_in_token, cart_token) {\n    this.logged_in_token = logged_in_token;\n    this.cart_token = cart_token;\n\n    this.cartPermit = {\n        logged_in_token: this.logged_in_token,\n        cart_token: this.cart_token,\n\n        // laravel token\n        _token: $('meta[name=\"csrf-token\"]').attr('content')\n    };\n}\n\nCartItemApi.prototype = {\n    /**\n     * Get all cart items\n     *\n     * @param {function} callback\n     * @return {void}\n     */\n    getCartItems: function(callback) {\n        $.get(\"/api/shopping-cart/cart-items\", this.cartPermit, callback);\n    },\n\n    /**\n     * Add item to cart\n     *\n     * @param {json}   data {\n     *     name [string],\n     *     front_image [string],\n     *     brand [string],\n     *     item_id [int]\n     *     block_pattern_id [int],\n     *     neck option [string],\n     *     description [string],\n     *     type [string],\n     *     builder_customization [string],\n     *     design_sheet [string]\n     * }\n     * @param {function} callback\n     * @return {void}\n     */\n    addToCart: function(data, callback) {\n        $.post(\"/api/shopping-cart/cart-items/add-to-cart\", $.extend({}, data, this.cartPermit), callback);\n    },\n\n    /**\n     * Update item to cart\n     *\n     * @param {int} cart_item_id\n     * @param {json}   data {\n     *     builder_customization [string]\n     * }\n     * @param {function} callback\n     * @return {void}\n     */\n    updateItem: function(cart_item_id, data, callback) {\n        var params = $.extend({}, data, this.cartPermit, {_method: \"PUT\"});\n\n        $.post(\"/api/shopping-cart/cart-items/\"+cart_item_id+\"/update\", params, callback);\n    },\n\n    /**\n     * Update image of item\n     *\n     * @param {int} cart_item_id\n     * @param {string} image\n     * @param {string} perspective (left,, front, back, right)\n     * @param {function} callback\n     * @return {void}\n     */\n    updateImage: function(cart_item_id, image, perspective, callback) {\n        var image_obj = {};\n        image_obj[perspective + \"_image\"] = image;\n        var params = $.extend({}, image_obj, this.cartPermit, {_method: \"PUT\"});\n\n        $.post(\"/api/shopping-cart/cart-items/\"+cart_item_id+\"/update-\"+perspective+\"-image\", params, callback);\n    },\n\n    /**\n     * Delete item to cart\n     *\n     * @param  {int}   cart_item_id\n     * @param  {function} callback\n     * @return {void}\n     */\n    deleteToCart: function(cart_item_id, callback) {\n        $.post(\"/api/shopping-cart/cart-items/\"+cart_item_id+\"/delete-to-cart\", $.extend({}, this.cartPermit, {_method: \"DELETE\"}), callback);\n    },\n\n    /**\n     * Retain item to cart. Assume the cart have duplicate cart item.\n     *\n     * @param  {int}   cart_item_id\n     * @param  {function} callback\n     * @return {void}\n     */\n    retainItem: function(cart_item_id, callback) {\n        $.post(\"/api/shopping-cart/cart-items/\"+cart_item_id+\"/retain-item\", $.extend({}, this.cartPermit, {_method: \"POST\"}), callback);\n    }\n};"]}