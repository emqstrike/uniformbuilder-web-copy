{"version":3,"sources":["UBCart.js"],"names":[],"mappingsfile":"ub-cart.js","sourcesContent":["/**\n * Required global object\n * - shopping_cart\n *     - logged_in_token\n *     - cart_token\n */\nvar UBCart = {\n    cartItemApi: null,\n\n    LEFT_IMAGE_PERSPECTIVE: \"left\",\n    FRONT_IMAGE_PERSPECTIVE: \"front\",\n    BACK_IMAGE_PERSPECTIVE: \"back\",\n    RIGHT_IMAGE_PERSPECTIVE: \"right\",\n\n    is_upload_base_64_image_available: true,\n\n    init: function() {\n        UBCart.cartItemApi = new CartItemApi(shopping_cart.logged_in_token, shopping_cart.cart_token);\n\n        // initialize shopping cart first before the start the logic\n        UBCart.initShoppingCart(function() {\n            // unbind first to avoid duplicate event\n            $('#left-side-toolbar').off('click', '.cart-btn[data-action=\"add\"]');\n            $('#left-side-toolbar').off('click', '.cart-btn[data-action=\"update\"]');\n\n            $('#left-side-toolbar').on('click', '.cart-btn[data-action=\"add\"]', UBCart.addToCart);\n            $('#left-side-toolbar').on('click', '.cart-btn[data-action=\"update\"]', UBCart.updateItem);\n\n            if (typeof Storage !== \"undefined\") {\n                sessionStorage.front_image = ub.getThumbnailImage2('front_view');\n\n                ub.funcs.showViews();\n                sessionStorage.left_image = ub.getThumbnailImage2('left_view');\n                sessionStorage.front_image = ub.getThumbnailImage2('front_view');\n                sessionStorage.back_image = ub.getThumbnailImage2('back_view');\n                sessionStorage.right_image = ub.getThumbnailImage2('right_view');\n                ub.funcs.hideViews();\n                ub.funcs.setVisibleView(ub.active_view);\n                ub[ub.active_view + '_view'].alpha = 1;\n            }\n        });\n    },\n\n    initShoppingCart: function(callback) {\n        UBCart.fetchCartItems(function(response) {\n            if (response.success) {\n                var cart_items = response.data;\n                var duplicate_material = UBCart.getDuplicateMaterial(cart_items);\n\n                if (duplicate_material.length > 0) {\n                    var duplicate_items_tmpl = _.template($('#duplicate-items-tmpl').html());\n                    bootbox.dialog({\n                        title: \"You have duplicate items. Please choose do you want to retain.\",\n                        message: duplicate_items_tmpl({duplicate_cart_items: duplicate_material}),\n                        closeButton: false\n                    });\n\n                    $('body').on('click', '#duplicate-items-container .cart-item-btn', UBCart.onSelectItemToBeRetain);\n                } else {\n                    // load cart items\n                    UBCart.updateShoppingCartDetails(cart_items);\n\n                    // add to cart button and update to cart\n                    if (! _.contains(_.pluck(cart_items, \"material_id\"), ub.config.material_id)) {\n                        // add to cart\n                        $('#left-side-toolbar .cart-btn').attr('data-action', \"add\");\n                        $('#left-side-toolbar .cart-btn .toolbar-item-label').text(\"ADD TO CART\");\n\n                        // load the default settings\n                        ub.loadDefaulUniformStyle(ub.data.defaultUniformStyle);\n                        ub.funcs.removeLocations();\n                    } else {\n                        // update cart\n                        var cart_item = _.find(cart_items, {material_id: ub.config.material_id});\n\n                        $('#left-side-toolbar .cart-btn').attr('data-action', \"update\");\n                        $('#left-side-toolbar .cart-btn').data('cart-item-id', cart_item.id);\n                        $('#left-side-toolbar .cart-btn .toolbar-item-label').text(\"UPDATE ITEM\");\n\n                        // load the uniform settings of cart item\n                        ub.loadSettings(JSON.parse(cart_item.builder_customization));\n                        ub.funcs.removeLocations();\n                    }\n\n                    $('#my-shopping-cart').removeAttr('cloak');\n\n                    callback();\n                }\n            } else {\n                console.log(\"Something went wrong on fetching cart items!\");\n            }\n        });\n    },\n\n    getDuplicateMaterial: function (cart_items) {\n        var duplicate_material = [];\n        var material_ids = _.uniq(_.pluck(cart_items, \"material_id\"));\n\n        for (var i in material_ids) {\n            var material_id = material_ids[i];\n            var result = _.where(cart_items, {material_id: material_id});\n\n            if (result.length > 1) {\n                duplicate_material.push(result);\n            }\n        }\n\n        return duplicate_material;\n    },\n\n\n    fetchCartItems: function(callback) {\n        UBCart.cartItemApi.getCartItems(function(response) {\n            callback(response);\n        });\n    },\n\n    updateShoppingCartDetails: function(cart_items) {\n        var tmpl = _.template($('#dropdown-cart-item-tmpl').html());\n\n        // change cart number\n        $('#my-shopping-cart .cart-item-number').text(cart_items.length);\n\n        // hide see all in my carts link if cart items empty\n        $('#my-carts-link')[cart_items.length === 0 ? \"hide\" : \"show\"]();\n\n        $('#dropdown-cart-item-list').html(tmpl({\n            cart_items: cart_items\n        }));\n    },\n\n    addToCart: function(e) {\n        e.preventDefault();\n        /* Act on the event */\n        console.log(\"Add to cart button madafaka jones\");\n\n        var material = ub.current_material.material;\n\n        waitingDialog.show(\"Adding item to cart...\", {rtl: false, progressType: \"success\"});\n        waitingDialog.progress(1, 2);\n\n        UBCart.cartItemApi.addToCart({\n            material_id: material.id,\n            name: material.name,\n            front_image: material.thumbnail_path,\n            brand: material.brand,\n            item_id: parseInt(material.id),\n            block_pattern_id: parseInt(material.block_pattern_id),\n            neck_option: ub.neckOption,\n            description: material.description,\n            type: material.type,\n            builder_customization: JSON.stringify(ub.current_material.settings),\n            design_sheet: material.design_sheet_path,\n        }, function(response) {\n            waitingDialog.progress(2, 2);\n            _.delay(function() { // delay 1s to finish the progress bar\n                if (response.success) {\n                    waitingDialog.message(response.message + \" Please wait to save styles for all perspective.\");\n\n                    _.delay(function() { // delay 3s to give time of reading long message\n                        // get all images\n                        ub.funcs.showViews();\n                        var current_left_image = ub.getThumbnailImage2('left_view');\n                        var current_front_image = ub.getThumbnailImage2('front_view');\n                        var current_back_image = ub.getThumbnailImage2('back_view');\n                        var current_right_image = ub.getThumbnailImage2('right_view');\n                        ub.funcs.hideViews();\n                        ub.funcs.setVisibleView(ub.active_view);\n                        ub[ub.active_view + '_view'].alpha = 1;\n                        // end\n\n                        UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_left_image, response.cart_item_id, UBCart.LEFT_IMAGE_PERSPECTIVE);\n                        UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_front_image, response.cart_item_id, UBCart.FRONT_IMAGE_PERSPECTIVE);\n                        UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_back_image, response.cart_item_id, UBCart.BACK_IMAGE_PERSPECTIVE);\n                        UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_right_image, response.cart_item_id, UBCart.RIGHT_IMAGE_PERSPECTIVE, true);\n\n                        if (typeof Storage !== \"undefined\") {\n                            sessionStorage.left_image = current_left_image;\n                            sessionStorage.front_image = current_front_image;\n                            sessionStorage.back_image = current_back_image;\n                            sessionStorage.right_image = current_right_image;\n                        }\n\n                        // change the action and text\n                        $('#left-side-toolbar .cart-btn').attr('data-action', \"update\");\n                        $('#left-side-toolbar .cart-btn').data('cart-item-id', response.cart_item_id);\n                        $('#left-side-toolbar .cart-btn .toolbar-item-label').text(\"UPDATE ITEM\");\n                    }, 3000);\n                } else {\n                    waitingDialog.message(response.message);\n\n                    _.delay(function() { // delay 1s to give time of reading short message\n                        waitingDialog.hide();\n                    }, 1000);\n                }\n            }, 1000);\n        });\n    },\n\n    updateItem: function(e) {\n        e.preventDefault();\n        /* Act on the event */\n        console.log(\"Update cart button madafaka jones\");\n\n        var cart_item_id = parseInt($(this).data('cart-item-id'));\n\n        waitingDialog.show(\"Updating item...\", {rtl: false, progressType: \"success\"});\n        waitingDialog.progress(1, 2);\n\n        UBCart.cartItemApi.updateItem(cart_item_id, {\n            builder_customization: JSON.stringify(ub.current_material.settings)\n        }, function(response) {\n            waitingDialog.progress(2, 2);\n\n            _.delay(function() { // delay 1s to finish the progress bar\n                if (response.success) {\n                    if (typeof Storage !== \"undefined\") {\n                        waitingDialog.message(response.message + \" Please wait to save styles for all perspective.\");\n\n                        _.delay(function() { // delay 3s to give time of reading long message\n                            // get all images\n                            ub.funcs.showViews();\n                            var current_left_image = ub.getThumbnailImage2('left_view');\n                            var current_front_image = ub.getThumbnailImage2('front_view');\n                            var current_back_image = ub.getThumbnailImage2('back_view');\n                            var current_right_image = ub.getThumbnailImage2('right_view');\n                            ub.funcs.hideViews();\n                            ub.funcs.setVisibleView(ub.active_view);\n                            ub[ub.active_view + '_view'].alpha = 1;\n                            // end\n\n                            if (sessionStorage.left_image !== current_left_image) {\n                                UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_left_image, cart_item_id, UBCart.LEFT_IMAGE_PERSPECTIVE);\n                                sessionStorage.left_image = current_left_image;\n                            }\n\n                            if (sessionStorage.front_image !== current_front_image) {\n                                UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_front_image, cart_item_id, UBCart.FRONT_IMAGE_PERSPECTIVE);\n                                sessionStorage.front_image = current_front_image;\n                            }\n\n                            if (sessionStorage.back_image !== current_back_image) {\n                                UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_back_image, cart_item_id, UBCart.BACK_IMAGE_PERSPECTIVE);\n                                sessionStorage.back_image = current_back_image;\n                            }\n\n                            if (sessionStorage.right_image !== current_right_image) {\n                                UBCart.uploadBase64ImageThenUpdateShoppingCartDetails(current_right_image, cart_item_id, UBCart.RIGHT_IMAGE_PERSPECTIVE, true);\n                                sessionStorage.right_image = current_right_image;\n                            }\n                        }, 3000);\n                    } else {\n                        waitingDialog.message(\"Cannot update the styles because Storage not support of the browser.\");\n\n                        _.delay(function() { // delay 1s to give time of reading short message\n                            waitingDialog.hide();\n                        }, 1000);\n                    }\n                } else {\n                    waitingDialog.message(response.message);\n\n                    _.delay(function() { // delay 1s to give time of reading short message\n                        waitingDialog.hide();\n                    }, 1000);\n                }\n            }, 1000);\n        });\n    },\n\n    uploadBase64ImageThenUpdateShoppingCartDetails: function(base64Image, cart_item_id, perspective, done) {\n        var upload_time = setInterval(function() {\n            if (UBCart.is_upload_base_64_image_available) {\n                done = done || false;\n\n                console.log(\"Processing: \" + perspective);\n\n                UBCart.is_upload_base_64_image_available = false;\n\n                waitingDialog.message(\"Saving styles for <b>\" + perspective + \" perspective</b>...\", {rtl: false, progressType: \"success\"});\n                // waitingDialog(\"Implementing styles for <b>\" + perspective + \" perspective</b>...\", {rtl: false, progressType: \"success\"});\n                waitingDialog.progress(1, 4);\n\n                // Upload base 64 image\n                ub.funcs.uploadBase64Image(base64Image, function(uploadImageResponse) {\n                    console.log(uploadImageResponse);\n                    waitingDialog.progress(2, 4);\n\n                    if (uploadImageResponse.success) {\n                        // update image\n                        UBCart.cartItemApi.updateImage(cart_item_id, uploadImageResponse.filename, perspective, function(updateThumbnailResponse) {\n                            waitingDialog.progress(3, 4);\n                            _.delay(function() { // delay .5s to finish the progress bar\n\n                                // update cart items in dropdown\n                                UBCart.fetchCartItems(function(response) {\n                                    var cart_items = response.data;\n                                    UBCart.updateShoppingCartDetails(cart_items);\n\n                                    waitingDialog.progress(4, 4);\n                                    _.delay(function() { // delay .5s to finish the progress bar\n                                        if (done) {\n                                            waitingDialog.hide()\n                                        }\n\n                                        _.delay(function() { // delay .5s again to give time for closing modal\n                                            UBCart.is_upload_base_64_image_available = true;\n                                            clearInterval(upload_time);\n                                        }, 500);\n                                    }, 500);\n                                });\n                            }, 500);\n                        });\n                    } else {\n                        // update cart items in dropdown\n                        UBCart.fetchCartItems(function(response) {\n                            var cart_items = response.data;\n                            UBCart.updateShoppingCartDetails(cart_items);\n\n                            waitingDialog.progress(100);\n                            _.delay(function() { // delay .5s to finish the progress bar\n                                waitingDialog.hide();\n\n                                _.delay(function() { // delay .5s again to give time of closing modal\n                                    UBCart.is_upload_base_64_image_available = true;\n                                    clearInterval(upload_time);\n                                }, 500);\n                            }, 500);\n                        });\n                    }\n                });\n            }\n        }, 1000);\n    },\n\n    onSelectItemToBeRetain: function() {\n        var _this = this;\n\n        $(this).parent().find('button').removeClass(\"active\");\n        $(this).addClass(\"active\");\n\n        bootbox.confirm(\"Are you sure do you want to retain the selected item?\", function(yes) {\n            if (yes) {\n                var cart_item_id = $(_this).data('cart-item-id');\n\n                UBCart.cartItemApi.retainItem(cart_item_id, function(response) {\n                    if (response.success) {\n                        $(_this).removeClass(\"btn-default\").addClass(\"btn-success\").prop('disabled', true);\n                        $(_this).parent().find(\"button:not('.active')\").fadeOut(function() {\n                            $(this).remove();\n\n                            var done = true;\n                            $.each($('#duplicate-items-container .panel'), function(index, el) {\n                                if ($('.cart-item-btn', el).length > 1) {\n                                    done = false;\n                                    return;\n                                }\n                            });\n\n                            if (done) {\n                                location.reload();\n                            }\n                        });\n\n                        console.log(response.message);\n                    } else {\n                        bootbox.alert(response.message);\n                    }\n                });\n            } else {\n                $(_this).removeClass('active');\n            }\n        });\n    }\n};"]}